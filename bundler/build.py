#!/usr/bin/python

from pathlib import Path
import sys, getopt
from datetime import datetime
import os
from typing import List

import constants as con

DIR_PATH = './src'
FILE_TYPE = 'js'

DIR_PATH_BUILD = './dist'
FILE_NAME = 'graph-engine'

MODE = con.FULL

toUpload = False

# str(path).find( f'core/' )

def is_unnecessary_path( path ):

    if ( MODE == con.CORE ):
        isCore = str(path).find( f'{ con.CORE }/' ) != -1
        return isCore

    return True

def is_unnecessary_file( name, file_type ):

    index = name == f'index.{ file_type }'
    script = name == f'script.{ file_type }'

    return index or script


def find_all_files( directory_path, file_type ):
    """ Find all files for custom directory """

    file_list = [ ]

    for path in Path( directory_path ).rglob(f'*.{ file_type }'):

        if ( not is_unnecessary_file( path, file_type ) and
            is_unnecessary_path( path )):

            # Continue for write files to list
            file_list.append( path.absolute() )
    
    return file_list


def is_unnecessary_line( line ):

    _import = line.find( 'import' ) != -1
    _export = line.find( 'export' ) != -1

    return _import or _export


def is_unnecessary_type( line ):

    _export = line.find( 'export const' ) != -1

    return _export


def remove_line( lines: list ):
    """ Delete the unnecessary line for the list ( file ) and return back list changed. """

    _lines = lines.copy()

    # Find line for deleted
    for line in lines:

        if ( is_unnecessary_type( line ) ):
            id = _lines.index( line )
            _lines[ id ] = line.replace( 'export const', 'const' )

        elif ( is_unnecessary_line( line ) ):
            _lines.remove( line )

    return _lines


def get_file_lines( path ):
    """
        Open file from path and safe this close the open file.
        Return all lines of the file.
    """

    open_file = open( path, 'rt' )
    lines = open_file.readlines()
    open_file.close()

    return lines


def read_and_change( files ):
    """ Read all files and remove unnecessary an header & footer code """

    files_lines = [ ]

    for file in files:

        # Write lines to list
        lines = get_file_lines( file )
        change_lines = remove_line( lines )
        files_lines.extend( change_lines )
    
    return files_lines


def save_lines_to_file( directory_path, file_name, lines ):
    """ Create new file for change text """

    # Get absolute path for save file
    path = Path( directory_path ).absolute()

    # Create file
    file = open( f'{ path }/{ file_name }', 'w', encoding = con.ENCODING )

    file.writelines( lines )

    file.close()


def has_index_priority( file ):
    """"""

    # Get last line for id position
    lines = get_file_lines( file )
    end_line = lines[ len( lines ) - 1 ].split( '// ' )
    
    return [ len( end_line ) >= 2, end_line ]


def change_priority_files( files: list ):
    """ Change priority on the files for the build file, due to class inheritance."""

    _files = files.copy()
    files_add = []

    for file in files:

        # Find elements file
        if str(file).find( f'Element.{ FILE_TYPE }' ) == -1:
            
            has_index = has_index_priority( file )[ 0 ]
            if has_index:

                # Remove file from list and add custom line from id position
                _files.remove( file )
                files_add.append( file )

               
        else:

            # Remove file from list and add on last position
            _files.remove( file )
            _files.insert( len( _files ), file )
    
    files_add_fix = files_add.copy()
    
    for file in files_add:

        index_priority = has_index_priority( file )
        has_index = index_priority[ 0 ]

        if has_index:
            end_line = index_priority[ 1 ]

            files_add_fix.remove( file )
            files_add_fix.insert( int( end_line[ 1 ] ), file )
    
    _files = files_add_fix + _files
    
    return _files


def set_arguments( argv ):

    opts, args = getopt.getopt(argv,"ho:u:m:",["ofile=", "upload", "mode="])

    if ( len( opts ) > 0 ):

        for opt, arg in opts:
            if opt == '-m' or opt == '--mode':
                global MODE
                MODE = con.CORE

            if opt == '-o':
                global DIR_PATH_BUILD
                DIR_PATH_BUILD = arg

            if opt == '-u' or opt == '--upload':
                global toUpload
                toUpload = True


def header():
    """ Write to document header description. """

    dt = datetime.now()

    lines = [

        '/**\n',
        ' * Module Description\n',
        ' *\n',
        f' * @version { dt.strftime("%y.a%m%d") }\n',
        f' * @date { dt.strftime("%Y") }\n',
        ' * @author Filip Vrba\n',
        ' * @remarks This file is autogenerated.\n',
        ' * @github https://github.com/filipvrba/graph \n',
        ' */\n\n'

    ]

    return lines


def get_file_name():
    return f'{ FILE_NAME }-{ MODE }.{ FILE_TYPE }'


def main( argv ):

    set_arguments( argv )

    files = find_all_files( DIR_PATH, FILE_TYPE )
    files = change_priority_files( files )

    new_file_lines = header();
    new_file_lines.extend( read_and_change( files ) )

    save_lines_to_file( DIR_PATH_BUILD, get_file_name(), new_file_lines )

    print( f'Graph engine is build in "{ DIR_PATH_BUILD }" directory.' )

    if toUpload:
        suitecloud_project = DIR_PATH_BUILD.split( '/' )[1]
        project_path = f'./{suitecloud_project}'

        os.system( f'cd "{ project_path }"; suitecloud file:upload --paths "/SuiteScripts/{ get_file_name() }"' )


if __name__ == "__main__":
    main( sys.argv[1:] )